function [agents, protoagents] = GenAgent(nf, na, diva, divg, no)
% Agents have par.nofunc functions. This is stored in an array and the agents' capability in any given function is the value in the array at a given
% position. Values can range from 0 to 10, but their sum is normalized to 10. Capabilities are generated by a Gaussian function. It's width specifies
% how universal the agent is: the wider the Gaussian the agent has high values (good capabilities) at multiple functions, if narrower, only at few
% functions. This will set the intra-personal functional diversity value.
%
% For the dominant functional diversity the maximum of the array is to be varied across agents: if multiple functions have the same probability, DFD
% will be high; if only a few functions have high probability, DFD will be low.

%% Generate agents
x = repmat(0:(nf-1), na, 1); %Create "functions"
domf = randsample(x(1,:), na, true, divg); %Find a dominant function for agents
agents = exp((-(x).^2)./(diva(1)+diva(1)*diva(2)/100*rand(na,1)-diva(2)/200)); %Initialize agents
agents = agents./sum(agents,2)*no; %Normalize agents to have a total capability of 10

protoagents = agents; %To be able to generate a number DFDs with given IFD

%Now some final touches
for aidx = 1:na
    
    %Randomly mix up functions so not all agents have the same strength for given functions
    agents(aidx,:) = agents(aidx, randperm(length(agents(aidx,:))));
    
    %And finally, put the strongest function to its place determined by domf
    swp = agents(aidx,domf(aidx)+1);
    [m, l] = max(agents(aidx,:));
    agents(aidx,domf(aidx)+1) = m;
    agents(aidx, l) = swp;
end


end
